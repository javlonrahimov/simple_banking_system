type: edu
files:
- name: banking/banking.py
  visible: true
  text: "# banking / credit card\nimport random\nimport sqlite3\n\n\n# I will treat\
    \ the bank card number as a string containing numeric digits\n# thus I can extract\
    \ the needed portions by slicing\n# and then turning them into numbers as needed.\n\
    \n\n# ============= create account ===========\ndef create_pin():  # returns the\
    \ pin as a 4 char string\n    return str(int(random.random() * 1e4)).zfill(4)\n\
    \n\ndef create_checksum(string):\n    accum = 0  # add up the string digits with\
    \ odd positions doubled\n    for i in reversed(range(len(string))):\n        val\
    \ = int(string[i]) * (1 if i % 2 else 2)\n        accum += val if val <= 9 else\
    \ val - 9  # reduce to single digit then add\n    return (10 - accum % 10) if\
    \ accum % 10 > 0 else 0  # this is subtle but rare\n\n\ndef create_account():\
    \  # returns an account number as a 16 char string\n    bank_id_st = '400000'\
    \  # 6 characters, as a string\n    act_st = str(int(random.random() * 1e6)).zfill(9)\
    \  # some leading 0s for fun\n    checksum_st = str(create_checksum(bank_id_st\
    \ + act_st))\n    return bank_id_st + act_st + checksum_st\n\n\ndef enter_acct():\
    \  # dbtable\n    acct = input('Enter your card number:\\n')\n    if len(acct)\
    \ != 16 or not acct.isnumeric():\n        print('Invalid card number')\n     \
    \   return False\n    lpin = input('Enter your PIN:\\n')  # so as not to be confused\
    \ with a global pin\n    if len(lpin) != 4 or not lpin.isnumeric():\n        print('Invalid\
    \ PIN')\n        return False\n    cmd = \"SELECT pin FROM card WHERE  number\
    \ = '{}'\".format(acct)\n    cursor.execute(cmd)\n    results = cursor.fetchone()\n\
    \    if results is None:\n        print('Wrong card number or PIN')  # card number\
    \ not found\n        return False\n    if lpin != results[0]:  # first and only\
    \ item in returned tuple\n        print('Wrong card number or PIN')  # pin doesn't\
    \ match\n        return False\n    print('You have successfully logged in!')\n\
    \    return acct  # this is the validated card number string which will be as\
    \ a True\n\n\n# ============= MAIN =========\n# database stuff do this once at\
    \ the beginning of the program\nconnection = sqlite3.connect('card.s3db')  # creates\
    \ the database or re opens it?\ncursor = connection.cursor()\n# cursor.execute('DROP\
    \ TABLE card')\ncommand1 = '''CREATE TABLE IF NOT EXISTS card \n(id INTEGER, number\
    \ TEXT, pin TEXT, balance INTEGER DEFAULT 0)'''\n# if id is PRIMARY KEY it must\
    \ be unique\ncursor.execute(command1)\n\nwhile True:\n    # ============= User\
    \ input ============\n    print('1. Create an account\\n'\n          '2. Log into\
    \ account\\n'\n          '0. Exit')\n\n    choice = int(input())\n    if choice\
    \ == 0:\n        print('Bye!')\n        connection.commit()  # save the database\
    \ for later use\n        break\n\n    if choice == 1:\n        try:\n        \
    \    card_num = create_account()\n            print('Your card has been created')\n\
    \            print('Your card number:\\n{}'.format(card_num))\n            pin\
    \ = create_pin()\n            print('Your card PIN:\\n{}'.format(pin))\n     \
    \       cmd = \"INSERT INTO card (number, pin) VALUES('{}', '{}')\".format(card_num,\
    \ pin)\n            cursor.execute(cmd)\n            # worry about auto-incrementing\
    \ the id field as Primary Key later\n        except sqlite3.OperationalError:\n\
    \            print('invalid attempt to append to database ----------')\n     \
    \       print('attempting to add {} with pin {} to\\n'.format(card_num, pin))\n\
    \            cursor.execute('SELECT * FROM card')  # show the whole table\n  \
    \          results = cursor.fetchall()\n            print(results)\n\n    elif\
    \ choice == 2:\n        c_num = enter_acct()  # card number (True) or False\n\
    \        if c_num:  # if True I have logged in, and this is the card number\n\
    \            print('1. Balance\\n'  # now I have more choices  \n            \
    \      '2. Log out\\n'\n                  '0. Exit')\n        choice2 = int(input())\n\
    \n        if choice2 == 1:\n            cmd = \"SELECT balance FROM card WHERE\
    \  number = '{}'\".format(c_num)\n            cursor.execute(cmd)\n          \
    \  results = cursor.fetchone()\n            if results is None:\n            \
    \    print('something strange happened during data lookup')\n                #\
    \ break\n            else:\n                print('Balance: {}'.format(results[0]))\n\
    \n        elif choice2 == 2:\n            print('You have successfully logged\
    \ out!')\n\n        elif choice2 == 0:\n            break\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest, WrongAnswerException
    from hstest.test_case import TestCase
    from shutil import copy2
    import sqlite3
    import random
    import re
    import os

    card_number = ''
    pin = ''
    second_card_number = ''
    second_pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str, count=0):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD, where D is a digit.')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.')
        if count == 2:
            return (number[0], PIN[0]), (number[1], PIN[1])
        else:
            return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong('Your table should have columns described in the stage instructions.\n'
                                                 'Make sure you use INTEGER type not INT.')
        except Exception:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output: str, value_to_return):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                is_found = False
                for row in rows:
                    if number in row:
                        is_found = True
                if not is_found:
                    return CheckResult.wrong('Your database doesn’t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    def test_add_income(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return '2\n{}\n{}\n2\n10000'.format(card_number, pin)


    def test_second_add_income(output: str, value_to_return):
        global card_number
        expected_balance = 10000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        return '2\n15000'


    def test_balance_after_second_income(output: str, value_to_return):
        global card_number, are_all_inputs_read
        expected_balance = 25000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        are_all_inputs_read = True
        return value_to_return


    def test_transfer(output: str, value_to_return):
        global card_number, pin, second_card_number, second_pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output, count=2)
        card_number, pin = credentials[0]
        second_card_number, second_pin = credentials[1]
        doesnt_pass_luhn = 4000003972196502
        return '2\n{}\n{}\n3\n{}'.format(card_number, pin, doesnt_pass_luhn)


    def test_transfer_doesnt_pass_luhn(output: str, value_to_return):
        if 'mistake'.lower() not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that doesn\'t pass '
                                     'the Luhn algorithm.\n Instead output \'{}\''.format(
                'Probably you made mistake in card number. Please try again!'))
        doesnt_exist_card = 3000003972196503
        return '3\n{}'.format(doesnt_exist_card)


    def test_transfer_doesnt_exist_card(output: str, value_to_return):
        global second_card_number
        if 'not exist' not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that does not exist.'
                                     '\nYpu should print \'{}\''.format('Such a card does not exist.'))
        return '3\n{}\n10000'.format(second_card_number)


    def test_transfer_not_enough_money(output: str, value_to_return):
        global second_card_number
        if 'not enough money' not in output.lower():
            return CheckResult.wrong('You should not allow a transfer if there is not enough money '
                                     'in the account to complete it.\n')
        return '2\n20000\n3\n{}\n10000'.format(second_card_number)


    def test_balance_after_transfer(output: str, value_to_return):
        global card_number, second_card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            first = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not first:
                return CheckResult.wrong(f'Can\' find card number \'{first}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            second = db.execute('SELECT * FROM card WHERE number = {}'.format(second_card_number)).fetchone()
            if not second:
                return CheckResult.wrong(f'Can\' find card number \'{second}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            first_balance = first[3]
            second_balance = second[3]
            if first_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card used to make the transfer.')
            if second_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card to which the transfer was made.')
        are_all_inputs_read = True
        return '0'


    def test_closing_account(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number, pin = credentials[0], credentials[1]
        return '2\n{}\n{}\n4'.format(card_number, pin)


    def test_rows_after_closing_account(output: str, value_to_return):
        global card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card WHERE number = \'{}\''.format(card_number)).fetchall()
            if rows:
                return CheckResult.wrong('After closing an account, the card number should be deleted from the database.')
        are_all_inputs_read = True
        return value_to_return


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_add_income(output, None),
                        lambda output: test_second_add_income(output, None),
                        lambda output: test_balance_after_second_income(output, '0'),
                    ]),
                TestCase(
                    stdin=[
                        '1\n1',
                        lambda output: test_transfer(output, None),
                        lambda output: test_transfer_doesnt_pass_luhn(output, None),
                        lambda output: test_transfer_doesnt_exist_card(output, None),
                        lambda output: test_transfer_not_enough_money(output, None),
                        lambda output: test_balance_after_transfer(output, None),
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_closing_account(output, None),
                        lambda output: test_rows_after_closing_account(output, '0')
                    ]
                )
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: card.s3db
  visible: true
  learner_created: true
- name: banking/card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/594/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/109/stages/594/implement">JetBrains
    Academy</a>
  time: Mon, 20 Jul 2020 10:54:10 UTC
record: 3
